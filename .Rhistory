taxcorporate <- ggplot(fortune500states, aes(x=n, y = topcorpinctax)) +
geom_point()+
geom_smooth(color='#581845')+
theme_ipsum(base_size = 12, axis_title_size = 14) +
theme(plot.title = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("# of headquarters") + ylab("income tax rate")+
ggtitle("income tax vs # headquarters")
taxcorporate
state_pop_url <- getURL("https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population",.opts = list(ssl.verifypeer = FALSE) )
# We needs this because the site is https
state_pop = readHTMLTable(state_pop_url, header = TRUE, which = 3)
state_pop
colnames(state_pop) <- tolower(colnames(state_pop))
write.csv(state_pop, "state_pop.csv")
library(readr)
state_pop <- read_csv("state_pop.csv")
colnames(state_pop)
state_pop <- subset(state_pop, select=c("state/federal district/territory/division/region\n","rank\n","2019 population\n")) %>% rename(state = "state/federal district/territory/division/region\n") %>% rename(rank = "rank\n") %>% rename (population = "2019 population\n") %>% mutate(state = tolower(state))
fortune500states_pop <- left_join(fortune500states,state_pop, by='state')
fortune500states_pop$population <- as.numeric(gsub(",","",fortune500states_pop$population,fixed = TRUE))
fortune500states_pop <- fortune500states_pop %>% mutate(scaled_n = n/population)
fortune500states_map <- left_join(us_states,fortune500states_pop, by='state')
fortune500states_map
taxcorporate_1 <- ggplot(fortune500states_map, aes(x=scaled_n, y = topcorpinctax)) +
geom_point()+
geom_smooth(color='#581845')+
theme_ipsum(base_size = 12, axis_title_size = 14) +
theme(plot.title = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("# of headquarters") + ylab("income tax rate")+
ggtitle("income tax vs # headquarters")
taxcorporate_1
library(ggmap)
# This is Walmart's HQ address:
geocode("702 S.W. Eighth St. Bentonville Arkansas 72716", output = "latlon" , source = "google")
locations_1 <- geocode(fortune500$streetadd, output = "latlon" , source = "google")
locations <- fortune500 %>% mutate(geocode(fortune500$streetadd, output = "latlon" , source = "google"))
head(locations)
fortune500_map_points<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n), color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat)), color='gold', alpha = .4) +
theme_ipsum() + theme(panel.grid = element_blank())
ggplotly(fortune500_map_points)
fortune500_map_points<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n),
color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),label=company),
color='gold', alpha = .4) +
theme_ipsum() +
theme(panel.grid = element_blank())
ggplotly(fortune500_map_points)
locations <- locations %>% mutate(X1 = 501-X1)
fortune500_map_points_sized<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n), color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),
label=company,size=X1),
color='white', alpha = .4) +
geom_text_repel(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),label=company))+
theme_ipsum() + theme(panel.grid = element_blank())
ggplotly(fortune500_map_points_sized)
le_tax <- read_excel('State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
knitr::opts_chunk$set(echo = TRUE)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
# install.packages (basic)
library(dplyr)
library(tidyverse)
# install.packages (themes)
library(ggthemes)
library(ggrepel)
library(RColorBrewer)
library(viridis)
library(hrbrthemes)
# install.packages (maps)
library(RgoogleMaps)
library(ggmap)
install.packages("maps")
# install.packages("WDI")
library(WDI) #world development indicators
?WDI
?register_google(key = "MY_GOOGLE_API")
df = WDI(indicator = "SH.IMM.MEAS" ,
start = 2019, end = 2019, extra = F)
df = df %>% filter(!is.na(SH.IMM.MEAS))
# converting a map's data to a df
?map_data("worlds")
world <- map_data("world")
world_list <- as_data_frame(world) %>% dplyr::rename(country=region)
head(world_list)
#used countrycode to add new column with iso2c
library(countrycode)
install.packages('countrycode')
install.packages('iso.expand')
install.packages("maps")
install.packages("countrycode")
world_list$iso2c <-countrycode(world_list$country,origin='country.name',destination="iso2c")
world_measles <- left_join(world_list,df,by="iso2c")
#looked at items where SH IMM MEAS is NA - these are just countries where the WDI does not appear to have the related data. Removed those records for now.
#world_measles[is.na(world_measles$SH.IMM.MEAS),] %>% group_by(country,SH.IMM.MEAS) %>% summarise()
world_measles <- world_measles %>% subset(!is.na(SH.IMM.MEAS))
world_measles_map <- ggplot(world_measles,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) +
theme_ipsum() + theme(panel.grid = element_blank())
world_measles_map
install.packages("countrycode")
#?codelist
#?countrycode
world_list$region <-countrycode(world_list$country,origin='country.name',destination="region")
world_measles <- left_join(world_list,df,by="iso2c")
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region, scales="free")
world_measles_map_facet
#?facet_wrap
#?element_text
#?aes
library(XML)
library(RCurl)
fortune500_url <- getURL("https://www.geographyrealm.com/fortune-500-list-by-state-for-2015/",.opts = list(ssl.verifypeer = FALSE) )  # We needs this because the site is https
fortune500 = readHTMLTable(fortune500_url, header = TRUE, which = 1)
colnames(fortune500) <- tolower(colnames(fortune500))
fortune500 <- subset(fortune500, select=c("company","streetadd","place","state","zip"))
write.csv(fortune500, "fortune500.csv")
library(readr)
fortune500 <- read_csv("fortune500.csv")
head(fortune500)
#aggregating / counting number of states in fortune 500 companies
fortune500states <- fortune500 %>% mutate(state = tolower(state)) %>% group_by(state) %>% count(state)
#set up for map and merging df's
us <- map_data("state")
us_states <- as_data_frame(us) %>% dplyr::rename(state=region)
fortune500states_map <- left_join(us_states,fortune500states, by='state')
fortune500_us_map <- ggplot(fortune500states_map,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = n), color='white') +
theme_ipsum() + theme(panel.grid = element_blank())
library(plotly)
ggplotly(fortune500_us_map)
#Task 2 Loading
library("readxl")
le_tax <- read_excel('State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
knitr::opts_chunk$set(echo = TRUE)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
# install.packages (basic)
library(dplyr)
library(tidyverse)
# install.packages (themes)
library(ggthemes)
library(ggrepel)
library(RColorBrewer)
library(viridis)
library(hrbrthemes)
# install.packages (maps)
library(RgoogleMaps)
library(ggmap)
install.packages("maps")
# install.packages("WDI")
library(WDI) #world development indicators
?WDI
?register_google(key = "MY_GOOGLE_API")
df = WDI(indicator = "SH.IMM.MEAS" ,
start = 2019, end = 2019, extra = F)
df = df %>% filter(!is.na(SH.IMM.MEAS))
# converting a map's data to a df
?map_data("worlds")
world <- map_data("world")
world_list <- as_data_frame(world) %>% dplyr::rename(country=region)
head(world_list)
#used countrycode to add new column with iso2c
library(countrycode)
install.packages('countrycode')
install.packages('iso.expand')
install.packages("maps")
install.packages("countrycode")
world_list$iso2c <-countrycode(world_list$country,origin='country.name',destination="iso2c")
world_measles <- left_join(world_list,df,by="iso2c")
#looked at items where SH IMM MEAS is NA - these are just countries where the WDI does not appear to have the related data. Removed those records for now.
#world_measles[is.na(world_measles$SH.IMM.MEAS),] %>% group_by(country,SH.IMM.MEAS) %>% summarise()
world_measles <- world_measles %>% subset(!is.na(SH.IMM.MEAS))
world_measles_map <- ggplot(world_measles,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) +
theme_ipsum() + theme(panel.grid = element_blank())
world_measles_map
install.packages("countrycode")
#?codelist
#?countrycode
world_list$region <-countrycode(world_list$country,origin='country.name',destination="region")
world_measles <- left_join(world_list,df,by="iso2c")
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region, scales="free")
world_measles_map_facet
#?facet_wrap
#?element_text
#?aes
library(XML)
library(RCurl)
fortune500_url <- getURL("https://www.geographyrealm.com/fortune-500-list-by-state-for-2015/",.opts = list(ssl.verifypeer = FALSE) )  # We needs this because the site is https
fortune500 = readHTMLTable(fortune500_url, header = TRUE, which = 1)
colnames(fortune500) <- tolower(colnames(fortune500))
fortune500 <- subset(fortune500, select=c("company","streetadd","place","state","zip"))
write.csv(fortune500, "fortune500.csv")
library(readr)
fortune500 <- read_csv("fortune500.csv")
head(fortune500)
#aggregating / counting number of states in fortune 500 companies
fortune500states <- fortune500 %>% mutate(state = tolower(state)) %>% group_by(state) %>% count(state)
#set up for map and merging df's
us <- map_data("state")
us_states <- as_data_frame(us) %>% dplyr::rename(state=region)
fortune500states_map <- left_join(us_states,fortune500states, by='state')
fortune500_us_map <- ggplot(fortune500states_map,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = n), color='white') +
theme_ipsum() + theme(panel.grid = element_blank())
library(plotly)
ggplotly(fortune500_us_map)
#Task 2 Loading
library("readxl")
le_tax <- read_excel('State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
le_tax <- read_excel('/Users/ConnieXu/Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /sandbox/yx2625/maps_excercise_files/State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
le_tax <- read_excel('/Users/ConnieXu/Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /sandbox/yx2625/maps_excercise_files/State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
le_tax <- le_tax %>% mutate(state = tolower(state))
head(le_tax)
#Task 2 Loading
library("readxl")
le_tax <- read_excel('/Users/ConnieXu/Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /sandbox/yx2625/maps_excercise_files/State_Corporate_Income_Tax_Rates_2015.xlsx',sheet = 2)
le_tax <- le_tax %>% mutate(state = tolower(state))
head(le_tax)
fortune500states <- left_join(fortune500states,le_tax, by='state')
taxcorporate <- ggplot(fortune500states, aes(x=n, y = topcorpinctax)) +
geom_point()+
geom_smooth(color='#581845')+
theme_ipsum(base_size = 12, axis_title_size = 14) +
theme(plot.title = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("# of headquarters") + ylab("income tax rate")+
ggtitle("income tax vs # headquarters")
taxcorporate
state_pop_url <- getURL("https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population",.opts = list(ssl.verifypeer = FALSE) )
# We needs this because the site is https
state_pop = readHTMLTable(state_pop_url, header = TRUE, which = 3)
state_pop
colnames(state_pop) <- tolower(colnames(state_pop))
write.csv(state_pop, "state_pop.csv")
library(readr)
state_pop <- read_csv("state_pop.csv")
colnames(state_pop)
state_pop <- subset(state_pop, select=c("state/federal district/territory/division/region\n","rank\n","2019 population\n")) %>% rename(state = "state/federal district/territory/division/region\n") %>% rename(rank = "rank\n") %>% rename (population = "2019 population\n") %>% mutate(state = tolower(state))
fortune500states_pop <- left_join(fortune500states,state_pop, by='state')
fortune500states_pop$population <- as.numeric(gsub(",","",fortune500states_pop$population,fixed = TRUE))
fortune500states_pop <- fortune500states_pop %>% mutate(scaled_n = n/population)
fortune500states_map <- left_join(us_states,fortune500states_pop, by='state')
fortune500states_map
taxcorporate_1 <- ggplot(fortune500states_map, aes(x=scaled_n, y = topcorpinctax)) +
geom_point()+
geom_smooth(color='#581845')+
theme_ipsum(base_size = 12, axis_title_size = 14) +
theme(plot.title = element_text(size = 14, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("# of headquarters") + ylab("income tax rate")+
ggtitle("income tax vs # headquarters")
taxcorporate_1
library(ggmap)
# This is Walmart's HQ address:
geocode("702 S.W. Eighth St. Bentonville Arkansas 72716", output = "latlon" , source = "google")
locations_1 <- geocode(fortune500$streetadd, output = "latlon" , source = "google")
locations <- fortune500 %>% mutate(geocode(fortune500$streetadd, output = "latlon" , source = "google"))
head(locations)
fortune500_map_points<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n), color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat)), color='gold', alpha = .4) +
theme_ipsum() + theme(panel.grid = element_blank())
ggplotly(fortune500_map_points)
fortune500_map_points<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n),
color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),label=company),
color='gold', alpha = .4) +
theme_ipsum() +
theme(panel.grid = element_blank())
ggplotly(fortune500_map_points)
locations <- locations %>% mutate(X1 = 501-X1)
fortune500_map_points_sized<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n), color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),
label=company,size=X1),
color='white', alpha = .4) +
geom_text_repel(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat),label=company))+
theme_ipsum() + theme(panel.grid = element_blank())
ggplotly(fortune500_map_points_sized)
knitr::opts_chunk$set(echo = TRUE)
fortune500_map_points<-ggmap(fortune500states_map) +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat)), color='gold', alpha = .4) +
theme_ipsum() + theme(panel.grid = element_blank())
fortune500_map_points<-ggmap(fortune500states_map) +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat)), color='gold', alpha = .4)
fortune500_map_1<-ggmap(fortune500states_map)
fortune500_map_1<-ggmap(fortune500states_map)
fortune500_map_1<-ggmaps(fortune500states_map)
library(ggmap)
fortune500_map_1<-ggmap(fortune500states_map)
ggplotly(fortune500_map_points)
fortune500_map_points<-ggplot() +
geom_polygon(data = fortune500states_map,aes(x = long, y = lat, group=group, fill = n), color='white') +
geom_point(data = locations, aes(x = as.numeric(lon),
y = as.numeric(lat)), color='gold', alpha = .4) +
theme_ipsum() + theme(panel.grid = element_blank())
ggplotly(fortune500_map_points)
library(ggmap)
# This is Walmart's HQ address:
geocode("702 S.W. Eighth St. Bentonville Arkansas 72716", output = "latlon" , source = "google")
# This is Walmart's HQ address:
geocode("702 S.W. Eighth St. Bentonville Arkansas 72716", output = "latlon" , source = "google")
locations_1 <- geocode(fortune500$streetadd, output = "latlon" , source = "google")
head(locations)
library(plotly)
ggplotly(fortune500_map_points)
map_CU_gm <- get_googlemap(fortune500$streetadd, zoom=18,
source="google", maptype="hybrid")
map_CU_gm <- get_googlemap(fortune500$streetadd, zoom=18,
source="google", maptype="hybrid")
map_CU_gm <- get_googlemap(fortune500$streetadd, zoom=18,
source="google", maptype="hybrid")
map_CU_gm <- get_googlemap(locations, zoom=18,
source="google", maptype="hybrid")
map_CU_gm <- get_googlemap("columbia university", zoom=18,
source="google", maptype="hybrid")
map_CU_gm <- get_googlemap("columbia university", zoom=18,
source="google", maptype="hybrid")
ggmap(map_CU_gm)
View(countrycodes)
View(df)
knitr::opts_chunk$set(echo = TRUE)
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region, scales="fixed")
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region)
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region, scales="fixed")
library(ggplot2)
world_measles_map_facet <- ggplot(world_measles,height=1600, width=800,  aes(x = long, y = lat, group=group)) +
geom_polygon(aes(fill = SH.IMM.MEAS), color='white') +
scale_fill_gradientn(colours=c("#FFC300","#C70039","#581845")) + theme_minimal() + theme(panel.background = element_blank(),
axis.text = element_blank())+
facet_wrap(~ region, scales="fixed")
world_measles_map_facet
library(acs)
?acs
shiny::runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
packageVersion(wordcloud2)
install.packages("wordcloud2")
install.packages("wordcloud2")
ackageVersion(wordcloud2)
PackageVersion('wordcloud2')
packageVersion('wordcloud')
packageVersion('wordclour2')
packageVersion('wordcloud2')
shiny::runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
install.packages('treemapify')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
treemap_data
treemap_data <- sc_dt %>% dplyr::mutate(Description=paste(`University Selectivity`, '\n',`Number of Universities`,'Universities'), sep ="\n")
## Connie: Student Debts
### Figure 1: <table_1>
sc_dt <- sc %>% subset(DEBT_MDN !='PrivacySuppressed') %>% transform(DEBT_MDN = as.numeric(DEBT_MDN)) %>% group_by(uni_rank) %>% mutate(`Number of Universities` = n()) %>% ungroup() %>% mutate(DEBT_MDN_STUDENTS = DEBT_MDN*UGDS) %>% group_by(uni_rank) %>% mutate(`Median Student Loans` = paste('$',round(sum(DEBT_MDN_STUDENTS, na.rm=TRUE)/sum(UGDS, na.rm=TRUE),2))) %>%
mutate(`Min Acceptance Rate` = percent(min(ADM_RATE))) %>% mutate(`Max Acceptance Rate` = percent(max(ADM_RATE))) %>% ungroup() %>%
group_by(uni_rank,`Median Student Loans`,`Number of Universities`,`Min Acceptance Rate`,`Max Acceptance Rate`) %>%
summarize() %>% dplyr::rename(`University Selectivity` = uni_rank)
sc <- Schools %>% filter(Year_Ending == 2019)%>%
dplyr::mutate(uni_rank = case_when(
ADM_RATE < 0.2 ~ 'highly selective/elite',
ADM_RATE < 0.3 ~ 'more selective',
ADM_RATE < 0.5 ~ 'selective',
ADM_RATE < 0.7 ~ 'less selective',
TRUE ~ 'not selective')) %>% mutate(uni_rank = factor(uni_rank, levels=c('not selective', 'less selective', 'selective', 'more selective', 'highly selective/elite')))
Schools <- read_csv('data/2010_2019_student_debt.csv') %>%
select(INSTNM, UGDS,CITY,LATITUDE, LONGITUDE, STABBR, ADM_RATE, DEBT_MDN, Year_Ending) %>%
filter(!is.na(ADM_RATE)) %>% subset(DEBT_MDN !='PrivacySuppressed') %>%
transform(DEBT_MDN = as.numeric(DEBT_MDN)) %>%
dplyr::mutate(DEBT_MDN = ifelse(is.na(DEBT_MDN), 0, DEBT_MDN)) %>%
mutate(DEBT_MDN_STUDENT = DEBT_MDN*UGDS)
sc <- Schools %>% filter(Year_Ending == 2019)%>%
dplyr::mutate(uni_rank = case_when(
ADM_RATE < 0.2 ~ 'highly selective/elite',
ADM_RATE < 0.3 ~ 'more selective',
ADM_RATE < 0.5 ~ 'selective',
ADM_RATE < 0.7 ~ 'less selective',
TRUE ~ 'not selective')) %>% mutate(uni_rank = factor(uni_rank, levels=c('not selective', 'less selective', 'selective', 'more selective', 'highly selective/elite')))
Schools <- read_csv('data/2010_2019_student_debt.csv') %>%
select(INSTNM, UGDS,CITY,LATITUDE, LONGITUDE, STABBR, ADM_RATE, DEBT_MDN, Year_Ending) %>%
filter(!is.na(ADM_RATE)) %>% subset(DEBT_MDN !='PrivacySuppressed') %>%
transform(DEBT_MDN = as.numeric(DEBT_MDN)) %>%
dplyr::mutate(DEBT_MDN = ifelse(is.na(DEBT_MDN), 0, DEBT_MDN)) %>%
mutate(DEBT_MDN_STUDENT = DEBT_MDN*UGDS)
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
# Connie's plots ~~~~~~~~~~~~~~~~~~~~~~~
#output$table <- renderDT({table_1})
output$treemap <- renderPlot(treemap)
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
View(ourtheme)
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
runApp('Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review')
setwd("~/Dropbox (Business)/Spring 2021/QMSS 5063 - Data Visualization /Group_G_HigherEd_Review")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
detach("package:treemapify", unload = TRUE)
library(treemapify)
runApp()
runApp()
runApp()
f
f
f
f
s
s
n
n
c
c
c
c
c
c
c
c
c
c
c
c
c
Q
runApp()
runApp()
